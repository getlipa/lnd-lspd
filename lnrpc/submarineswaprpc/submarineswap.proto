syntax = "proto3";

package submarineswaprpc;

option go_package = "github.com/lightningnetwork/lnd/lnrpc/submarineswaprpc";

message SubSwapClientInitRequest {
}
message SubSwapClientInitResponse {
    bytes preimage = 1 [json_name = "preimage"];
    bytes hash = 2 [json_name = "hash"];
    bytes key = 3 [json_name = "key"];
    bytes pubkey = 4 [json_name = "pubkey"];
}

message SubSwapServiceInitRequest {
    bytes hash = 1 [json_name = "hash"];
    bytes pubkey = 2 [json_name = "pubkey"];
}
message SubSwapServiceInitResponse {
    string address = 1 [json_name = "address"];
    bytes pubkey = 2 [json_name = "pubkey"];
    int64 lock_height = 3 [json_name = "lock_height"];
}

message SubSwapClientWatchRequest {
    bytes preimage = 1 [json_name = "preimage"];
    bytes key = 2 [json_name = "key"];
    bytes service_pubkey = 3 [json_name = "service_pubkey"];
    int64 lock_height = 4 [json_name = "lock_height"];
}
message SubSwapClientWatchResponse {
    string address = 1 [json_name = "address"];
    bytes script = 2 [json_name = "script"];
}

message UnspentAmountRequest {
    /// The address (to be used by a client using swap service)
    string address = 1 [json_name = "address"];
    /// The hash (to be used by a swapper service)
    bytes hash = 2 [json_name = "hash"];
}
message UnspentAmountResponse {
    message Utxo {
        int32 block_height = 1 [json_name = "block_height"];
        int64 amount = 2 [json_name = "amount"];
        string txid = 3 [json_name = "txid"];
        uint32 index = 4 [json_name = "index"];
    }
    /// The total amount
    int64 amount = 1 [json_name = "amount"];
    int32 lock_height = 2 [json_name = "lock_height"];
    repeated Utxo utxos = 3 [json_name = "utxos"];
}
message SubSwapServiceRedeemFeesRequest {
    /// The hash (to be used by a swapper service)
    bytes hash = 1 [json_name = "hash"];
    /// The target number of blocks that the funding transaction should be
    /// confirmed by.
    int32 target_conf = 2;
    /// A manual fee rate set in sat/byte that should be used when crafting the
    /// funding transaction.
    int64 sat_per_byte = 3;
}
message SubSwapServiceRedeemFeesResponse {
    int64 amount = 1 [json_name = "amount"];
}

message SubSwapServiceRedeemRequest {
    bytes preimage = 1 [json_name = "preimage"];

    /// The target number of blocks that the funding transaction should be
    /// confirmed by.
    int32 target_conf = 2;

    /// A manual fee rate set in sat/byte that should be used when crafting the
    /// funding transaction.
    int64 sat_per_byte = 3;
}
message SubSwapServiceRedeemResponse {
    /// The txid of the transaction.
    string txid = 1 [json_name = "txid"];
}

message SubSwapClientRefundRequest {
    /// The address used for the swap.
    string address = 1 [json_name = "address"];

    /// The address to receive the refund.
    string refundAddress = 2 [json_name = "refund_address"];

    /// The target number of blocks that the funding transaction should be
    /// confirmed by.
    int32 target_conf = 3;

    /// A manual fee rate set in sat/byte that should be used when crafting the
    /// funding transaction.
    int64 sat_per_byte = 4;
}
message SubSwapClientRefundResponse {
    /// The txid of the transaction.
    bytes tx = 1 [json_name = "tx"];

    // the fees for the refund transaction in sats
    int64 fees = 2 [json_name = "fees"];
}

service SubmarineSwapper {
    rpc SubSwapClientInit (SubSwapClientInitRequest)
        returns (SubSwapClientInitResponse) {
    }

    /**
     */
    rpc SubSwapServiceInit (SubSwapServiceInitRequest)
        returns (SubSwapServiceInitResponse) {
    }

    /**
     */
    rpc SubSwapClientWatch (SubSwapClientWatchRequest)
        returns (SubSwapClientWatchResponse) {
    }

    /**
    UnspentAmount returns the total amount of the btc received in a watched
    address, the block height and the age of the first transaction sending btc
    to the address.
    */
    rpc UnspentAmount (UnspentAmountRequest) returns (UnspentAmountResponse) {
    }

    /**
    SubSwapServiceFeesRedeem returns the fees to redeem the amount received.
    */
    rpc SubSwapServiceRedeemFees (SubSwapServiceRedeemFeesRequest)
        returns (SubSwapServiceRedeemFeesResponse) {
    }

    /**
    SubSwapServiceRedeem redeems the amount received to a new address of the
    internal wallet.
    */
    rpc SubSwapServiceRedeem (SubSwapServiceRedeemRequest)
        returns (SubSwapServiceRedeemResponse) {
    }

    /**
    SubSwapClientRefund refunds the amount received to a an external address.
    */
    rpc SubSwapClientRefund (SubSwapClientRefundRequest)
        returns (SubSwapClientRefundResponse) {
    }
}
