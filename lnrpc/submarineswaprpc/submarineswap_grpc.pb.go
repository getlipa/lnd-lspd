// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: submarineswaprpc/submarineswap.proto

package submarineswaprpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubmarineSwapperClient is the client API for SubmarineSwapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubmarineSwapperClient interface {
	SubSwapClientInit(ctx context.Context, in *SubSwapClientInitRequest, opts ...grpc.CallOption) (*SubSwapClientInitResponse, error)
	//*
	SubSwapServiceInit(ctx context.Context, in *SubSwapServiceInitRequest, opts ...grpc.CallOption) (*SubSwapServiceInitResponse, error)
	//*
	SubSwapClientWatch(ctx context.Context, in *SubSwapClientWatchRequest, opts ...grpc.CallOption) (*SubSwapClientWatchResponse, error)
	//*
	//UnspentAmount returns the total amount of the btc received in a watched address,
	//the block height and the age of the first transaction sending btc to the address.
	UnspentAmount(ctx context.Context, in *UnspentAmountRequest, opts ...grpc.CallOption) (*UnspentAmountResponse, error)
	//*
	//SubSwapServiceFeesRedeem returns the fees to redeem the amount received.
	SubSwapServiceRedeemFees(ctx context.Context, in *SubSwapServiceRedeemFeesRequest, opts ...grpc.CallOption) (*SubSwapServiceRedeemFeesResponse, error)
	//*
	//SubSwapServiceRedeem redeems the amount received to a new address of the internal wallet.
	SubSwapServiceRedeem(ctx context.Context, in *SubSwapServiceRedeemRequest, opts ...grpc.CallOption) (*SubSwapServiceRedeemResponse, error)
	//*
	//SubSwapClientRefund refunds the amount received to a an external address.
	SubSwapClientRefund(ctx context.Context, in *SubSwapClientRefundRequest, opts ...grpc.CallOption) (*SubSwapClientRefundResponse, error)
}

type submarineSwapperClient struct {
	cc grpc.ClientConnInterface
}

func NewSubmarineSwapperClient(cc grpc.ClientConnInterface) SubmarineSwapperClient {
	return &submarineSwapperClient{cc}
}

func (c *submarineSwapperClient) SubSwapClientInit(ctx context.Context, in *SubSwapClientInitRequest, opts ...grpc.CallOption) (*SubSwapClientInitResponse, error) {
	out := new(SubSwapClientInitResponse)
	err := c.cc.Invoke(ctx, "/submarineswaprpc.SubmarineSwapper/SubSwapClientInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submarineSwapperClient) SubSwapServiceInit(ctx context.Context, in *SubSwapServiceInitRequest, opts ...grpc.CallOption) (*SubSwapServiceInitResponse, error) {
	out := new(SubSwapServiceInitResponse)
	err := c.cc.Invoke(ctx, "/submarineswaprpc.SubmarineSwapper/SubSwapServiceInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submarineSwapperClient) SubSwapClientWatch(ctx context.Context, in *SubSwapClientWatchRequest, opts ...grpc.CallOption) (*SubSwapClientWatchResponse, error) {
	out := new(SubSwapClientWatchResponse)
	err := c.cc.Invoke(ctx, "/submarineswaprpc.SubmarineSwapper/SubSwapClientWatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submarineSwapperClient) UnspentAmount(ctx context.Context, in *UnspentAmountRequest, opts ...grpc.CallOption) (*UnspentAmountResponse, error) {
	out := new(UnspentAmountResponse)
	err := c.cc.Invoke(ctx, "/submarineswaprpc.SubmarineSwapper/UnspentAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submarineSwapperClient) SubSwapServiceRedeemFees(ctx context.Context, in *SubSwapServiceRedeemFeesRequest, opts ...grpc.CallOption) (*SubSwapServiceRedeemFeesResponse, error) {
	out := new(SubSwapServiceRedeemFeesResponse)
	err := c.cc.Invoke(ctx, "/submarineswaprpc.SubmarineSwapper/SubSwapServiceRedeemFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submarineSwapperClient) SubSwapServiceRedeem(ctx context.Context, in *SubSwapServiceRedeemRequest, opts ...grpc.CallOption) (*SubSwapServiceRedeemResponse, error) {
	out := new(SubSwapServiceRedeemResponse)
	err := c.cc.Invoke(ctx, "/submarineswaprpc.SubmarineSwapper/SubSwapServiceRedeem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submarineSwapperClient) SubSwapClientRefund(ctx context.Context, in *SubSwapClientRefundRequest, opts ...grpc.CallOption) (*SubSwapClientRefundResponse, error) {
	out := new(SubSwapClientRefundResponse)
	err := c.cc.Invoke(ctx, "/submarineswaprpc.SubmarineSwapper/SubSwapClientRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubmarineSwapperServer is the server API for SubmarineSwapper service.
// All implementations must embed UnimplementedSubmarineSwapperServer
// for forward compatibility
type SubmarineSwapperServer interface {
	SubSwapClientInit(context.Context, *SubSwapClientInitRequest) (*SubSwapClientInitResponse, error)
	//*
	SubSwapServiceInit(context.Context, *SubSwapServiceInitRequest) (*SubSwapServiceInitResponse, error)
	//*
	SubSwapClientWatch(context.Context, *SubSwapClientWatchRequest) (*SubSwapClientWatchResponse, error)
	//*
	//UnspentAmount returns the total amount of the btc received in a watched address,
	//the block height and the age of the first transaction sending btc to the address.
	UnspentAmount(context.Context, *UnspentAmountRequest) (*UnspentAmountResponse, error)
	//*
	//SubSwapServiceFeesRedeem returns the fees to redeem the amount received.
	SubSwapServiceRedeemFees(context.Context, *SubSwapServiceRedeemFeesRequest) (*SubSwapServiceRedeemFeesResponse, error)
	//*
	//SubSwapServiceRedeem redeems the amount received to a new address of the internal wallet.
	SubSwapServiceRedeem(context.Context, *SubSwapServiceRedeemRequest) (*SubSwapServiceRedeemResponse, error)
	//*
	//SubSwapClientRefund refunds the amount received to a an external address.
	SubSwapClientRefund(context.Context, *SubSwapClientRefundRequest) (*SubSwapClientRefundResponse, error)
	mustEmbedUnimplementedSubmarineSwapperServer()
}

// UnimplementedSubmarineSwapperServer must be embedded to have forward compatible implementations.
type UnimplementedSubmarineSwapperServer struct {
}

func (UnimplementedSubmarineSwapperServer) SubSwapClientInit(context.Context, *SubSwapClientInitRequest) (*SubSwapClientInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubSwapClientInit not implemented")
}
func (UnimplementedSubmarineSwapperServer) SubSwapServiceInit(context.Context, *SubSwapServiceInitRequest) (*SubSwapServiceInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubSwapServiceInit not implemented")
}
func (UnimplementedSubmarineSwapperServer) SubSwapClientWatch(context.Context, *SubSwapClientWatchRequest) (*SubSwapClientWatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubSwapClientWatch not implemented")
}
func (UnimplementedSubmarineSwapperServer) UnspentAmount(context.Context, *UnspentAmountRequest) (*UnspentAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnspentAmount not implemented")
}
func (UnimplementedSubmarineSwapperServer) SubSwapServiceRedeemFees(context.Context, *SubSwapServiceRedeemFeesRequest) (*SubSwapServiceRedeemFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubSwapServiceRedeemFees not implemented")
}
func (UnimplementedSubmarineSwapperServer) SubSwapServiceRedeem(context.Context, *SubSwapServiceRedeemRequest) (*SubSwapServiceRedeemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubSwapServiceRedeem not implemented")
}
func (UnimplementedSubmarineSwapperServer) SubSwapClientRefund(context.Context, *SubSwapClientRefundRequest) (*SubSwapClientRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubSwapClientRefund not implemented")
}
func (UnimplementedSubmarineSwapperServer) mustEmbedUnimplementedSubmarineSwapperServer() {}

// UnsafeSubmarineSwapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubmarineSwapperServer will
// result in compilation errors.
type UnsafeSubmarineSwapperServer interface {
	mustEmbedUnimplementedSubmarineSwapperServer()
}

func RegisterSubmarineSwapperServer(s grpc.ServiceRegistrar, srv SubmarineSwapperServer) {
	s.RegisterService(&SubmarineSwapper_ServiceDesc, srv)
}

func _SubmarineSwapper_SubSwapClientInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubSwapClientInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmarineSwapperServer).SubSwapClientInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/submarineswaprpc.SubmarineSwapper/SubSwapClientInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmarineSwapperServer).SubSwapClientInit(ctx, req.(*SubSwapClientInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmarineSwapper_SubSwapServiceInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubSwapServiceInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmarineSwapperServer).SubSwapServiceInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/submarineswaprpc.SubmarineSwapper/SubSwapServiceInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmarineSwapperServer).SubSwapServiceInit(ctx, req.(*SubSwapServiceInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmarineSwapper_SubSwapClientWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubSwapClientWatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmarineSwapperServer).SubSwapClientWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/submarineswaprpc.SubmarineSwapper/SubSwapClientWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmarineSwapperServer).SubSwapClientWatch(ctx, req.(*SubSwapClientWatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmarineSwapper_UnspentAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnspentAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmarineSwapperServer).UnspentAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/submarineswaprpc.SubmarineSwapper/UnspentAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmarineSwapperServer).UnspentAmount(ctx, req.(*UnspentAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmarineSwapper_SubSwapServiceRedeemFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubSwapServiceRedeemFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmarineSwapperServer).SubSwapServiceRedeemFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/submarineswaprpc.SubmarineSwapper/SubSwapServiceRedeemFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmarineSwapperServer).SubSwapServiceRedeemFees(ctx, req.(*SubSwapServiceRedeemFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmarineSwapper_SubSwapServiceRedeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubSwapServiceRedeemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmarineSwapperServer).SubSwapServiceRedeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/submarineswaprpc.SubmarineSwapper/SubSwapServiceRedeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmarineSwapperServer).SubSwapServiceRedeem(ctx, req.(*SubSwapServiceRedeemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmarineSwapper_SubSwapClientRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubSwapClientRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmarineSwapperServer).SubSwapClientRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/submarineswaprpc.SubmarineSwapper/SubSwapClientRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmarineSwapperServer).SubSwapClientRefund(ctx, req.(*SubSwapClientRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubmarineSwapper_ServiceDesc is the grpc.ServiceDesc for SubmarineSwapper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubmarineSwapper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "submarineswaprpc.SubmarineSwapper",
	HandlerType: (*SubmarineSwapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubSwapClientInit",
			Handler:    _SubmarineSwapper_SubSwapClientInit_Handler,
		},
		{
			MethodName: "SubSwapServiceInit",
			Handler:    _SubmarineSwapper_SubSwapServiceInit_Handler,
		},
		{
			MethodName: "SubSwapClientWatch",
			Handler:    _SubmarineSwapper_SubSwapClientWatch_Handler,
		},
		{
			MethodName: "UnspentAmount",
			Handler:    _SubmarineSwapper_UnspentAmount_Handler,
		},
		{
			MethodName: "SubSwapServiceRedeemFees",
			Handler:    _SubmarineSwapper_SubSwapServiceRedeemFees_Handler,
		},
		{
			MethodName: "SubSwapServiceRedeem",
			Handler:    _SubmarineSwapper_SubSwapServiceRedeem_Handler,
		},
		{
			MethodName: "SubSwapClientRefund",
			Handler:    _SubmarineSwapper_SubSwapClientRefund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submarineswaprpc/submarineswap.proto",
}
