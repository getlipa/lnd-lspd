// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: submarineswaprpc/submarineswap.proto

package submarineswaprpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubSwapClientInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubSwapClientInitRequest) Reset() {
	*x = SubSwapClientInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSwapClientInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSwapClientInitRequest) ProtoMessage() {}

func (x *SubSwapClientInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSwapClientInitRequest.ProtoReflect.Descriptor instead.
func (*SubSwapClientInitRequest) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{0}
}

type SubSwapClientInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preimage []byte `protobuf:"bytes,1,opt,name=preimage,proto3" json:"preimage,omitempty"`
	Hash     []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Key      []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Pubkey   []byte `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *SubSwapClientInitResponse) Reset() {
	*x = SubSwapClientInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSwapClientInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSwapClientInitResponse) ProtoMessage() {}

func (x *SubSwapClientInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSwapClientInitResponse.ProtoReflect.Descriptor instead.
func (*SubSwapClientInitResponse) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{1}
}

func (x *SubSwapClientInitResponse) GetPreimage() []byte {
	if x != nil {
		return x.Preimage
	}
	return nil
}

func (x *SubSwapClientInitResponse) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *SubSwapClientInitResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SubSwapClientInitResponse) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

type SubSwapServiceInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Pubkey []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *SubSwapServiceInitRequest) Reset() {
	*x = SubSwapServiceInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSwapServiceInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSwapServiceInitRequest) ProtoMessage() {}

func (x *SubSwapServiceInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSwapServiceInitRequest.ProtoReflect.Descriptor instead.
func (*SubSwapServiceInitRequest) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{2}
}

func (x *SubSwapServiceInitRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *SubSwapServiceInitRequest) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

type SubSwapServiceInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pubkey     []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	LockHeight int64  `protobuf:"varint,3,opt,name=lock_height,proto3" json:"lock_height,omitempty"`
}

func (x *SubSwapServiceInitResponse) Reset() {
	*x = SubSwapServiceInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSwapServiceInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSwapServiceInitResponse) ProtoMessage() {}

func (x *SubSwapServiceInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSwapServiceInitResponse.ProtoReflect.Descriptor instead.
func (*SubSwapServiceInitResponse) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{3}
}

func (x *SubSwapServiceInitResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SubSwapServiceInitResponse) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *SubSwapServiceInitResponse) GetLockHeight() int64 {
	if x != nil {
		return x.LockHeight
	}
	return 0
}

type SubSwapClientWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preimage      []byte `protobuf:"bytes,1,opt,name=preimage,proto3" json:"preimage,omitempty"`
	Key           []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	ServicePubkey []byte `protobuf:"bytes,3,opt,name=service_pubkey,proto3" json:"service_pubkey,omitempty"`
	LockHeight    int64  `protobuf:"varint,4,opt,name=lock_height,proto3" json:"lock_height,omitempty"`
}

func (x *SubSwapClientWatchRequest) Reset() {
	*x = SubSwapClientWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSwapClientWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSwapClientWatchRequest) ProtoMessage() {}

func (x *SubSwapClientWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSwapClientWatchRequest.ProtoReflect.Descriptor instead.
func (*SubSwapClientWatchRequest) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{4}
}

func (x *SubSwapClientWatchRequest) GetPreimage() []byte {
	if x != nil {
		return x.Preimage
	}
	return nil
}

func (x *SubSwapClientWatchRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SubSwapClientWatchRequest) GetServicePubkey() []byte {
	if x != nil {
		return x.ServicePubkey
	}
	return nil
}

func (x *SubSwapClientWatchRequest) GetLockHeight() int64 {
	if x != nil {
		return x.LockHeight
	}
	return 0
}

type SubSwapClientWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Script  []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *SubSwapClientWatchResponse) Reset() {
	*x = SubSwapClientWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSwapClientWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSwapClientWatchResponse) ProtoMessage() {}

func (x *SubSwapClientWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSwapClientWatchResponse.ProtoReflect.Descriptor instead.
func (*SubSwapClientWatchResponse) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{5}
}

func (x *SubSwapClientWatchResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SubSwapClientWatchResponse) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

type UnspentAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The address (to be used by a client using swap service)
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	/// The hash (to be used by a swapper service)
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *UnspentAmountRequest) Reset() {
	*x = UnspentAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnspentAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnspentAmountRequest) ProtoMessage() {}

func (x *UnspentAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnspentAmountRequest.ProtoReflect.Descriptor instead.
func (*UnspentAmountRequest) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{6}
}

func (x *UnspentAmountRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UnspentAmountRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type UnspentAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The total amount
	Amount     int64                         `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	LockHeight int32                         `protobuf:"varint,2,opt,name=lock_height,proto3" json:"lock_height,omitempty"`
	Utxos      []*UnspentAmountResponse_Utxo `protobuf:"bytes,3,rep,name=utxos,proto3" json:"utxos,omitempty"`
}

func (x *UnspentAmountResponse) Reset() {
	*x = UnspentAmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnspentAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnspentAmountResponse) ProtoMessage() {}

func (x *UnspentAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnspentAmountResponse.ProtoReflect.Descriptor instead.
func (*UnspentAmountResponse) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{7}
}

func (x *UnspentAmountResponse) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UnspentAmountResponse) GetLockHeight() int32 {
	if x != nil {
		return x.LockHeight
	}
	return 0
}

func (x *UnspentAmountResponse) GetUtxos() []*UnspentAmountResponse_Utxo {
	if x != nil {
		return x.Utxos
	}
	return nil
}

type SubSwapServiceRedeemFeesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The hash (to be used by a swapper service)
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	/// The target number of blocks that the funding transaction should be confirmed by.
	TargetConf int32 `protobuf:"varint,2,opt,name=target_conf,json=targetConf,proto3" json:"target_conf,omitempty"`
	/// A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
	SatPerByte int64 `protobuf:"varint,3,opt,name=sat_per_byte,json=satPerByte,proto3" json:"sat_per_byte,omitempty"`
}

func (x *SubSwapServiceRedeemFeesRequest) Reset() {
	*x = SubSwapServiceRedeemFeesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSwapServiceRedeemFeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSwapServiceRedeemFeesRequest) ProtoMessage() {}

func (x *SubSwapServiceRedeemFeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSwapServiceRedeemFeesRequest.ProtoReflect.Descriptor instead.
func (*SubSwapServiceRedeemFeesRequest) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{8}
}

func (x *SubSwapServiceRedeemFeesRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *SubSwapServiceRedeemFeesRequest) GetTargetConf() int32 {
	if x != nil {
		return x.TargetConf
	}
	return 0
}

func (x *SubSwapServiceRedeemFeesRequest) GetSatPerByte() int64 {
	if x != nil {
		return x.SatPerByte
	}
	return 0
}

type SubSwapServiceRedeemFeesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount int64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SubSwapServiceRedeemFeesResponse) Reset() {
	*x = SubSwapServiceRedeemFeesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSwapServiceRedeemFeesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSwapServiceRedeemFeesResponse) ProtoMessage() {}

func (x *SubSwapServiceRedeemFeesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSwapServiceRedeemFeesResponse.ProtoReflect.Descriptor instead.
func (*SubSwapServiceRedeemFeesResponse) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{9}
}

func (x *SubSwapServiceRedeemFeesResponse) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type SubSwapServiceRedeemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preimage []byte `protobuf:"bytes,1,opt,name=preimage,proto3" json:"preimage,omitempty"`
	/// The target number of blocks that the funding transaction should be confirmed by.
	TargetConf int32 `protobuf:"varint,2,opt,name=target_conf,json=targetConf,proto3" json:"target_conf,omitempty"`
	/// A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
	SatPerByte int64 `protobuf:"varint,3,opt,name=sat_per_byte,json=satPerByte,proto3" json:"sat_per_byte,omitempty"`
}

func (x *SubSwapServiceRedeemRequest) Reset() {
	*x = SubSwapServiceRedeemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSwapServiceRedeemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSwapServiceRedeemRequest) ProtoMessage() {}

func (x *SubSwapServiceRedeemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSwapServiceRedeemRequest.ProtoReflect.Descriptor instead.
func (*SubSwapServiceRedeemRequest) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{10}
}

func (x *SubSwapServiceRedeemRequest) GetPreimage() []byte {
	if x != nil {
		return x.Preimage
	}
	return nil
}

func (x *SubSwapServiceRedeemRequest) GetTargetConf() int32 {
	if x != nil {
		return x.TargetConf
	}
	return 0
}

func (x *SubSwapServiceRedeemRequest) GetSatPerByte() int64 {
	if x != nil {
		return x.SatPerByte
	}
	return 0
}

type SubSwapServiceRedeemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The txid of the transaction.
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *SubSwapServiceRedeemResponse) Reset() {
	*x = SubSwapServiceRedeemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSwapServiceRedeemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSwapServiceRedeemResponse) ProtoMessage() {}

func (x *SubSwapServiceRedeemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSwapServiceRedeemResponse.ProtoReflect.Descriptor instead.
func (*SubSwapServiceRedeemResponse) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{11}
}

func (x *SubSwapServiceRedeemResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type SubSwapClientRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The address used for the swap.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	/// The address to receive the refund.
	RefundAddress string `protobuf:"bytes,2,opt,name=refundAddress,json=refund_address,proto3" json:"refundAddress,omitempty"`
	/// The target number of blocks that the funding transaction should be confirmed by.
	TargetConf int32 `protobuf:"varint,3,opt,name=target_conf,json=targetConf,proto3" json:"target_conf,omitempty"`
	/// A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
	SatPerByte int64 `protobuf:"varint,4,opt,name=sat_per_byte,json=satPerByte,proto3" json:"sat_per_byte,omitempty"`
}

func (x *SubSwapClientRefundRequest) Reset() {
	*x = SubSwapClientRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSwapClientRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSwapClientRefundRequest) ProtoMessage() {}

func (x *SubSwapClientRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSwapClientRefundRequest.ProtoReflect.Descriptor instead.
func (*SubSwapClientRefundRequest) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{12}
}

func (x *SubSwapClientRefundRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SubSwapClientRefundRequest) GetRefundAddress() string {
	if x != nil {
		return x.RefundAddress
	}
	return ""
}

func (x *SubSwapClientRefundRequest) GetTargetConf() int32 {
	if x != nil {
		return x.TargetConf
	}
	return 0
}

func (x *SubSwapClientRefundRequest) GetSatPerByte() int64 {
	if x != nil {
		return x.SatPerByte
	}
	return 0
}

type SubSwapClientRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The txid of the transaction.
	Tx []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// the fees for the refund transaction in sats
	Fees int64 `protobuf:"varint,2,opt,name=fees,proto3" json:"fees,omitempty"`
}

func (x *SubSwapClientRefundResponse) Reset() {
	*x = SubSwapClientRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSwapClientRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSwapClientRefundResponse) ProtoMessage() {}

func (x *SubSwapClientRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSwapClientRefundResponse.ProtoReflect.Descriptor instead.
func (*SubSwapClientRefundResponse) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{13}
}

func (x *SubSwapClientRefundResponse) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *SubSwapClientRefundResponse) GetFees() int64 {
	if x != nil {
		return x.Fees
	}
	return 0
}

type UnspentAmountResponse_Utxo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight int32  `protobuf:"varint,1,opt,name=block_height,proto3" json:"block_height,omitempty"`
	Amount      int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Txid        string `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"`
	Index       uint32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *UnspentAmountResponse_Utxo) Reset() {
	*x = UnspentAmountResponse_Utxo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnspentAmountResponse_Utxo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnspentAmountResponse_Utxo) ProtoMessage() {}

func (x *UnspentAmountResponse_Utxo) ProtoReflect() protoreflect.Message {
	mi := &file_submarineswaprpc_submarineswap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnspentAmountResponse_Utxo.ProtoReflect.Descriptor instead.
func (*UnspentAmountResponse_Utxo) Descriptor() ([]byte, []int) {
	return file_submarineswaprpc_submarineswap_proto_rawDescGZIP(), []int{7, 0}
}

func (x *UnspentAmountResponse_Utxo) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *UnspentAmountResponse_Utxo) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UnspentAmountResponse_Utxo) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *UnspentAmountResponse_Utxo) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_submarineswaprpc_submarineswap_proto protoreflect.FileDescriptor

var file_submarineswaprpc_submarineswap_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x73, 0x77, 0x61, 0x70, 0x72,
	0x70, 0x63, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x73, 0x77, 0x61, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e,
	0x65, 0x73, 0x77, 0x61, 0x70, 0x72, 0x70, 0x63, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x53,
	0x77, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x47, 0x0a, 0x19, 0x53,
	0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x22, 0x70, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x53, 0x77,
	0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4e, 0x0a, 0x1a,
	0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x44, 0x0a, 0x14,
	0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x83, 0x02, 0x0a, 0x15, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e,
	0x65, 0x73, 0x77, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55,
	0x74, 0x78, 0x6f, 0x52, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x1a, 0x6c, 0x0a, 0x04, 0x55, 0x74,
	0x78, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x78, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x53,
	0x77, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x20, 0x0a, 0x0c, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x61, 0x74, 0x50, 0x65, 0x72, 0x42, 0x79,
	0x74, 0x65, 0x22, 0x3a, 0x0a, 0x20, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7c,
	0x0a, 0x1b, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x61,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x61, 0x74, 0x50, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x22, 0x32, 0x0a, 0x1c,
	0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64,
	0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x61, 0x74, 0x50, 0x65, 0x72, 0x42,
	0x79, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x74, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x32, 0xc1, 0x06, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x61,
	0x72, 0x69, 0x6e, 0x65, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x11, 0x53,
	0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74,
	0x12, 0x2a, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x73, 0x77, 0x61, 0x70,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73,
	0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x73, 0x77, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x12, 0x53,
	0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x69,
	0x74, 0x12, 0x2b, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x73, 0x77, 0x61,
	0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x73, 0x77, 0x61, 0x70, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71,
	0x0a, 0x12, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65,
	0x73, 0x77, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x73, 0x77, 0x61,
	0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x62, 0x0a, 0x0d, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x73, 0x77,
	0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x75, 0x62,
	0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x73, 0x77, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e,
	0x73, 0x70, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x46, 0x65,
	0x65, 0x73, 0x12, 0x31, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x73, 0x77,
	0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e,
	0x65, 0x73, 0x77, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x46, 0x65, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x14, 0x53,
	0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x12, 0x2d, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x73,
	0x77, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x73, 0x77,
	0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x2c, 0x2e, 0x73, 0x75,
	0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x73, 0x77, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x75, 0x62, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x75, 0x62, 0x6d,
	0x61, 0x72, 0x69, 0x6e, 0x65, 0x73, 0x77, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62,
	0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69,
	0x6e, 0x67, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6c, 0x6e, 0x64, 0x2f, 0x6c, 0x6e,
	0x72, 0x70, 0x63, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x73, 0x77, 0x61,
	0x70, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_submarineswaprpc_submarineswap_proto_rawDescOnce sync.Once
	file_submarineswaprpc_submarineswap_proto_rawDescData = file_submarineswaprpc_submarineswap_proto_rawDesc
)

func file_submarineswaprpc_submarineswap_proto_rawDescGZIP() []byte {
	file_submarineswaprpc_submarineswap_proto_rawDescOnce.Do(func() {
		file_submarineswaprpc_submarineswap_proto_rawDescData = protoimpl.X.CompressGZIP(file_submarineswaprpc_submarineswap_proto_rawDescData)
	})
	return file_submarineswaprpc_submarineswap_proto_rawDescData
}

var file_submarineswaprpc_submarineswap_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_submarineswaprpc_submarineswap_proto_goTypes = []interface{}{
	(*SubSwapClientInitRequest)(nil),         // 0: submarineswaprpc.SubSwapClientInitRequest
	(*SubSwapClientInitResponse)(nil),        // 1: submarineswaprpc.SubSwapClientInitResponse
	(*SubSwapServiceInitRequest)(nil),        // 2: submarineswaprpc.SubSwapServiceInitRequest
	(*SubSwapServiceInitResponse)(nil),       // 3: submarineswaprpc.SubSwapServiceInitResponse
	(*SubSwapClientWatchRequest)(nil),        // 4: submarineswaprpc.SubSwapClientWatchRequest
	(*SubSwapClientWatchResponse)(nil),       // 5: submarineswaprpc.SubSwapClientWatchResponse
	(*UnspentAmountRequest)(nil),             // 6: submarineswaprpc.UnspentAmountRequest
	(*UnspentAmountResponse)(nil),            // 7: submarineswaprpc.UnspentAmountResponse
	(*SubSwapServiceRedeemFeesRequest)(nil),  // 8: submarineswaprpc.SubSwapServiceRedeemFeesRequest
	(*SubSwapServiceRedeemFeesResponse)(nil), // 9: submarineswaprpc.SubSwapServiceRedeemFeesResponse
	(*SubSwapServiceRedeemRequest)(nil),      // 10: submarineswaprpc.SubSwapServiceRedeemRequest
	(*SubSwapServiceRedeemResponse)(nil),     // 11: submarineswaprpc.SubSwapServiceRedeemResponse
	(*SubSwapClientRefundRequest)(nil),       // 12: submarineswaprpc.SubSwapClientRefundRequest
	(*SubSwapClientRefundResponse)(nil),      // 13: submarineswaprpc.SubSwapClientRefundResponse
	(*UnspentAmountResponse_Utxo)(nil),       // 14: submarineswaprpc.UnspentAmountResponse.Utxo
}
var file_submarineswaprpc_submarineswap_proto_depIdxs = []int32{
	14, // 0: submarineswaprpc.UnspentAmountResponse.utxos:type_name -> submarineswaprpc.UnspentAmountResponse.Utxo
	0,  // 1: submarineswaprpc.SubmarineSwapper.SubSwapClientInit:input_type -> submarineswaprpc.SubSwapClientInitRequest
	2,  // 2: submarineswaprpc.SubmarineSwapper.SubSwapServiceInit:input_type -> submarineswaprpc.SubSwapServiceInitRequest
	4,  // 3: submarineswaprpc.SubmarineSwapper.SubSwapClientWatch:input_type -> submarineswaprpc.SubSwapClientWatchRequest
	6,  // 4: submarineswaprpc.SubmarineSwapper.UnspentAmount:input_type -> submarineswaprpc.UnspentAmountRequest
	8,  // 5: submarineswaprpc.SubmarineSwapper.SubSwapServiceRedeemFees:input_type -> submarineswaprpc.SubSwapServiceRedeemFeesRequest
	10, // 6: submarineswaprpc.SubmarineSwapper.SubSwapServiceRedeem:input_type -> submarineswaprpc.SubSwapServiceRedeemRequest
	12, // 7: submarineswaprpc.SubmarineSwapper.SubSwapClientRefund:input_type -> submarineswaprpc.SubSwapClientRefundRequest
	1,  // 8: submarineswaprpc.SubmarineSwapper.SubSwapClientInit:output_type -> submarineswaprpc.SubSwapClientInitResponse
	3,  // 9: submarineswaprpc.SubmarineSwapper.SubSwapServiceInit:output_type -> submarineswaprpc.SubSwapServiceInitResponse
	5,  // 10: submarineswaprpc.SubmarineSwapper.SubSwapClientWatch:output_type -> submarineswaprpc.SubSwapClientWatchResponse
	7,  // 11: submarineswaprpc.SubmarineSwapper.UnspentAmount:output_type -> submarineswaprpc.UnspentAmountResponse
	9,  // 12: submarineswaprpc.SubmarineSwapper.SubSwapServiceRedeemFees:output_type -> submarineswaprpc.SubSwapServiceRedeemFeesResponse
	11, // 13: submarineswaprpc.SubmarineSwapper.SubSwapServiceRedeem:output_type -> submarineswaprpc.SubSwapServiceRedeemResponse
	13, // 14: submarineswaprpc.SubmarineSwapper.SubSwapClientRefund:output_type -> submarineswaprpc.SubSwapClientRefundResponse
	8,  // [8:15] is the sub-list for method output_type
	1,  // [1:8] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_submarineswaprpc_submarineswap_proto_init() }
func file_submarineswaprpc_submarineswap_proto_init() {
	if File_submarineswaprpc_submarineswap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_submarineswaprpc_submarineswap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSwapClientInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_submarineswaprpc_submarineswap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSwapClientInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_submarineswaprpc_submarineswap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSwapServiceInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_submarineswaprpc_submarineswap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSwapServiceInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_submarineswaprpc_submarineswap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSwapClientWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_submarineswaprpc_submarineswap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSwapClientWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_submarineswaprpc_submarineswap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnspentAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_submarineswaprpc_submarineswap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnspentAmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_submarineswaprpc_submarineswap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSwapServiceRedeemFeesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_submarineswaprpc_submarineswap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSwapServiceRedeemFeesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_submarineswaprpc_submarineswap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSwapServiceRedeemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_submarineswaprpc_submarineswap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSwapServiceRedeemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_submarineswaprpc_submarineswap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSwapClientRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_submarineswaprpc_submarineswap_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSwapClientRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_submarineswaprpc_submarineswap_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnspentAmountResponse_Utxo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_submarineswaprpc_submarineswap_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_submarineswaprpc_submarineswap_proto_goTypes,
		DependencyIndexes: file_submarineswaprpc_submarineswap_proto_depIdxs,
		MessageInfos:      file_submarineswaprpc_submarineswap_proto_msgTypes,
	}.Build()
	File_submarineswaprpc_submarineswap_proto = out.File
	file_submarineswaprpc_submarineswap_proto_rawDesc = nil
	file_submarineswaprpc_submarineswap_proto_goTypes = nil
	file_submarineswaprpc_submarineswap_proto_depIdxs = nil
}
